from telegram import Update
from telegram.ext import CallbackContext
from datetime import datetime, timedelta, date
import dateparser

from nlp.command_parser import handle_voice_command


#–ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext) -> None:
    user_first_name = update.effective_user.first_name if update.effective_user.first_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏ /help:\n"
    )
    update.message.reply_text(welcome_message)

# –ö–æ–º–∞–Ω–¥–∞ /help
def help_command(update: Update, context: CallbackContext) -> None:
    help_message = (
        "‚úâÔ∏è *–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ü–æ—á—Ç—ã:*\n\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ\n"
        "`/sendmail email@example.com –¢–µ–º–∞ –ø–∏—Å—å–º–∞`\n\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
        "`/sendmailat email@example.com –¢–µ–º–∞ –ø–∏—Å—å–º–∞ | –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ | [–í—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º' –∏–ª–∏ '20 –º–∞—Ä—Ç–∞ 2025 –≥–æ–¥, –≤ 14:30']`\n\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É\n"
        "`/senddraft –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–∞`\n\n"
        "–ü–æ–ª—É—á–∏—Ç—å 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "`/getunread`\n\n"
        "–ù–∞–π—Ç–∏ –ø–∏—Å—å–º–æ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É\n"
        "`/findemail –¢–µ–º–∞ –ø–∏—Å—å–º–∞`\n\n"
        "–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∏—Å—å–º–∞ –∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö\n"
        "`/inbox`\n\n"
        "–ü–æ–ª—É—á–∏—Ç—å 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "`/getstarred`\n\n"
        "–£–¥–∞–ª–∏—Ç—å —Å–ø–∞–º\n"
        "`/deletespam`\n\n"
        "–£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
        "`/deletetrash`\n\n"
        "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏\n"
        "`/deletepromo`\n\n"
        "üìù *–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ó–∞–º–µ—Ç–æ–∫ (Google Keep):*\n\n"
        "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "`/addnote –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏ | –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏`\n\n"
        "üîî *–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ö–∞–ª–µ–Ω–¥–∞—Ä—è:*\n\n"
        "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "`/addevent –ù–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞—á–∞–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 17:00), –∫–æ–Ω–µ—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä 19:00), 5 –º–∏–Ω—É—Ç`\n\n"
        "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "`/cancelevent –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è`\n\n"
        "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≤–µ—Å—Ç–∫—É –¥–Ω—è\n"
        "`/schedule [–°–µ–≥–æ–¥–Ω—è –∏–ª–∏ –¥–∞—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '20 –º–∞—Ä—Ç–∞ 2050 –≥–æ–¥']`\n\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è\n"
        "`/setreminder –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, 5 –º–∏–Ω—É—Ç`\n\n"
        "‚ÑπÔ∏è *–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "`/start`\n\n"
        "–°–ø—Ä–∞–≤–∫–∞\n"
        "`/help`"
    )
    update.message.reply_text(help_message, parse_mode="Markdown")

#–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ö–æ–º–∞–Ω–¥–∞ /sendmail
def sendmail_command(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    command_body = text[len('/sendmail'):].strip()
    if '|' not in command_body:
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/sendmail email@example.com –¢–µ–º–∞ –ø–∏—Å—å–º–∞ | –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"
        )
        return

    left_part, message_body = command_body.split('|', 1)
    left_parts = left_part.strip().split(' ', 1)
    if len(left_parts) < 2:
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/sendmail email@example.com –¢–µ–º–∞ –ø–∏—Å—å–º–∞ | –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"
        )
        return

    recipient = left_parts[0].strip()
    subject = left_parts[1].strip()
    message_body = message_body.strip()

    from Services.Google_Gmail import send_email
    try:
        send_email(recipient, subject, message_body)
        update.message.reply_text("–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")

#–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –ö–æ–º–∞–Ω–¥–∞ /sendmailat
def sendmailat_command(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    parts = text[len('/sendmailat'):].strip().split('|')
    if len(parts) != 3:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/sendmailat email@example.com –¢–µ–º–∞ –ø–∏—Å—å–º–∞ | –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ | –í—Ä–µ–º—è")
        return
    left_part = parts[0].strip()
    message_body = parts[1].strip()
    time_str = parts[2].strip()
    left_parts = left_part.split(' ', 1)
    if len(left_parts) < 2:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/sendmailat email@example.com –¢–µ–º–∞ –ø–∏—Å—å–º–∞ | –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ | –í—Ä–µ–º—è")
        return
    recipient = left_parts[0].strip()
    subject = left_parts[1].strip()
    from Services.Google_Gmail import send_email_at_time
    try:
        send_email_at_time(recipient, subject, message_body, time_str)
        update.message.reply_text("–ü–∏—Å—å–º–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {e}")

#–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∏—Å—å–º–∞ –∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö. –ö–æ–º–∞–Ω–¥–∞ /inbox
def inbox_command(update: Update, context: CallbackContext) -> None:
    from Services.Google_Gmail import get_inbox_messages
    try:
        messages = get_inbox_messages(max_results=10)
        if not messages:
            update.message.reply_text("–í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        response_lines = []
        for i, msg in enumerate(messages, start=1):
            response_lines.append(
                f"{i}.**–û—Ç:** {msg['from_name']}\n"
                f"**–ü–æ—á—Ç–∞:** {msg['from_email']}\n"
                f"**–¢–µ–º–∞:** {msg['subject']}\n"
                f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {msg['snippet']}"
            )
        response_text = "\n\n".join(response_lines)
        update.message.reply_text(response_text, parse_mode="Markdown")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /getunread ‚Äì 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def getunread_command(update: Update, context: CallbackContext) -> None:
    from Services.Google_Gmail import get_unread_messages
    try:
        messages = get_unread_messages(10)
        if not messages:
            update.message.reply_text("–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        response_lines = []
        for i, msg in enumerate(messages, start=1):
            response_lines.append(
                f"{i}.**–û—Ç:** {msg['from_name']}\n"
                f"**–ü–æ—á—Ç–∞:** {msg['from_email']}\n"
                f"**–¢–µ–º–∞:** {msg['subject']}\n"
                f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {msg['snippet']}"
            )
        response_text = "\n\n".join(response_lines)
        update.message.reply_text(response_text, parse_mode="Markdown")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /senddraft ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
def senddraft_command(update: Update, context: CallbackContext) -> None:
    """
    –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:
    /senddraft –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    –ò—â–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
    """
    text = update.message.text
    draft_subject = text[len('/senddraft'):].strip()
    if not draft_subject:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.\n–§–æ—Ä–º–∞—Ç: /senddraft –ó–∞–≥–æ–ª–æ–≤–æ–∫")
        return
    from Services.Google_Gmail import send_draft_by_subject
    try:
        send_draft_by_subject(draft_subject)
        update.message.reply_text("–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /findemail ‚Äì –ø–æ–∏—Å–∫ –ø–∏—Å—å–º–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
def findemail_command(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    subject_search = text[len('/findemail'):].strip()
    if not subject_search:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —á–∞—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n–§–æ—Ä–º–∞—Ç: /findemail –¢–µ–º–∞ –ø–∏—Å—å–º–∞")
        return
    from Services.Google_Gmail import find_email_by_subject
    try:
        emails = find_email_by_subject(subject_search)
        if not emails:
            update.message.reply_text("–ü–∏—Å—å–º–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        response_lines = []
        for i, email in enumerate(emails, start=1):
            response_lines.append(f"{i}. –û—Ç: {email['from']}\n   –¢–µ–º–∞: {email['subject']}\n   –°–Ω–∏–ø–ø–µ—Ç: {email['snippet']}")
        response_text = "\n\n".join(response_lines)
        update.message.reply_text(response_text)
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∏—Å—å–º–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ "–°–ø–∞–º"
def delete_spam_command(update: Update, context: CallbackContext) -> None:
    from Services.Google_Gmail import get_gmail_service
    try:
        service = get_gmail_service()
        result = service.users().messages().list(userId="me", labelIds=["SPAM"]).execute()
        messages = result.get("messages", [])
        if not messages:
            update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ø–∞–º–µ.")
            return
        for msg in messages:
            service.users().messages().delete(userId="me", id=msg["id"]).execute()
        update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–ø–∞–º–∞.")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–∞–º–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ "–ö–æ—Ä–∑–∏–Ω–∞"
def delete_trash_command(update: Update, context: CallbackContext) -> None:
    from Services.Google_Gmail import get_gmail_service
    try:
        service = get_gmail_service()
        result = service.users().messages().list(userId="me", labelIds=["TRASH"]).execute()
        messages = result.get("messages", [])
        if not messages:
            update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
            return
        for msg in messages:
            service.users().messages().delete(userId="me", id=msg["id"]).execute()
        update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ "–ü—Ä–æ–º–æ–∞–∫—Ü–∏—è"
def delete_promo_command(update: Update, context: CallbackContext) -> None:
    from Services.Google_Gmail import get_gmail_service
    try:
        service = get_gmail_service()
        result = service.users().messages().list(userId="me", labelIds=["CATEGORY_PROMOTIONS"]).execute()
        messages = result.get("messages", [])
        if not messages:
            update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ–º–æ–∞–∫—Ü–∏—è—Ö.")
            return
        for msg in messages:
            service.users().messages().delete(userId="me", id=msg["id"]).execute()
        update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–π.")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–π: {e}")

# –í—ã–≤–æ–¥ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def getstarred_command(update: Update, context: CallbackContext) -> None:
    from Services.Google_Gmail import get_starred_messages
    try:
        messages = get_starred_messages(max_results=10)
        if not messages:
            update.message.reply_text("–ù–µ—Ç –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return
        response_lines = []
        for i, msg in enumerate(messages, start=1):
            response_lines.append(
                f"{i}. –û—Ç: {msg['from_name']}\n"
                f"   –ü–æ—á—Ç–∞: {msg['from_email']}\n"
                f"   –¢–µ–º–∞: {msg['subject']}\n"
                f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {msg['snippet']}"
            )
        response_text = "\n\n".join(response_lines)
        update.message.reply_text(response_text)
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

#–ö–æ–º–∞–Ω–¥–∞ /addnote
def addnote_command(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    command_body = text[len('/addnote'):].strip()
    if '|' not in command_body:
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/addnote –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏ | –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏"
        )
        return

    title, note_text = command_body.split('|', 1)
    title = title.strip()
    note_text = note_text.strip()

    from Services.Google_Keep import add_note
    try:
        add_note(title, note_text)
        update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")


# –ö–æ–º–∞–Ω–¥–∞ /addevent
def addevent_command(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    command_body = text[len('/addevent'):].strip()
    parts = [part.strip() for part in command_body.split(',')]
    if len(parts) != 5:
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /addevent –ù–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞—á–∞–ª–æ 17:00, –∫–æ–Ω–µ—Ü 19:00, 5 –º–∏–Ω—É—Ç"
        )
        return

    summary, description, start_time_str, end_time_str, reminder_part = parts

    # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ "–Ω–∞—á–∞–ª–æ" –∏ "–∫–æ–Ω–µ—Ü", –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    start_time_str = start_time_str.lower().replace("–Ω–∞—á–∞–ª–æ", "").strip()
    end_time_str = end_time_str.lower().replace("–∫–æ–Ω–µ—Ü", "").strip()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω—É—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    try:
        reminder_minutes = int(reminder_part.split()[0])
    except ValueError:
        update.message.reply_text("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–º–∏–Ω—É—Ç—ã).")
        return

    # –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è ‚Äî —Å–µ–≥–æ–¥–Ω—è
    from datetime import datetime, date
    today_str = date.today().strftime("%Y-%m-%d")
    try:
        start_dt = datetime.strptime(f"{today_str} {start_time_str}", "%Y-%m-%d %H:%M")
        end_dt = datetime.strptime(f"{today_str} {end_time_str}", "%Y-%m-%d %H:%M")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return

    start_iso = start_dt.isoformat()
    end_iso = end_dt.isoformat()

    from Services.Google_Calendar import add_event
    try:
        event = add_event(
            summary,
            "",  # –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ location
            description,
            start_iso,
            end_iso,
            [{'method': 'popup', 'minutes': reminder_minutes}]
        )
        update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. ID: {event.get('id')}")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
def parse_date(input_str: str) -> datetime:
    dt = dateparser.parse(input_str, languages=['ru'])
    if dt is None:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏: {input_str}")
    return dt

# –ö–æ–º–∞–Ω–¥–∞ /schedule
def schedule_command(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    command_body = text[len('/schedule'):].strip()
    from Services.Google_Calendar import get_daily_schedule

    try:
        if not command_body or command_body.lower() == "—Å–µ–≥–æ–¥–Ω—è":
            date_obj = datetime.now()
        else:
            date_obj = parse_date(command_body)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD"
        date_str = date_obj.strftime("%Y-%m-%d")
        events = get_daily_schedule(date_str=date_str)
        if not events:
            update.message.reply_text(f"–ù–∞ –¥–∞—Ç—É {date_str} —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        response_lines = []
        for ev in events:
            start_iso = ev.get('start', {}).get('dateTime')
            end_iso = ev.get('end', {}).get('dateTime')
            if start_iso and end_iso:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ISO-—Ñ–æ—Ä–º–∞—Ç –∫ –æ–±—ä–µ–∫—Ç—É datetime –∏ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
                start_dt = datetime.fromisoformat(start_iso.replace("Z", "+00:00"))
                end_dt = datetime.fromisoformat(end_iso.replace("Z", "+00:00"))
                time_str = f"–ù–∞—á–∞–ª–æ: {start_dt.strftime('%H:%M')}, –ö–æ–Ω–µ—Ü: {end_dt.strftime('%H:%M')}"
            else:
                time_str = "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            response_lines.append(f"–°–æ–±—ã—Ç–∏–µ: {ev.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n{time_str}")
        response_text = "\n\n".join(response_lines)
        update.message.reply_text(response_text)
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≤–µ—Å—Ç–∫–∏ –¥–Ω—è: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /setreminder
def setreminder_command(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    command_body = text[len('/setreminder'):].strip()
    if ',' not in command_body:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/setreminder –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, 5 –º–∏–Ω—É—Ç")
        return

    parts = command_body.split(',', 1)
    event_name = parts[0].strip()
    try:
        reminder_minutes = int(parts[1].strip().split()[0])
    except ValueError:
        update.message.reply_text("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–º–∏–Ω—É—Ç—ã).")
        return

    from Services.Google_Calendar import find_event_by_name, set_reminder
    try:
        events = find_event_by_name(event_name)
        if not events:
            update.message.reply_text("–°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        event_to_update = events[0]
        event_id = event_to_update.get('id')
        updated_event = set_reminder(event_id, reminder_minutes)
        update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{updated_event.get('summary')}'.")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /cancelevent
def cancelevent_command(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    event_name = text[len('/cancelevent'):].strip()
    if not event_name:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    from Services.Google_Calendar import find_event_by_name, cancel_event
    try:
        events = find_event_by_name(event_name)
        if not events:
            update.message.reply_text("–°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        event_to_cancel = events[0]
        event_id = event_to_cancel.get('id')
        cancel_event(event_id)
        update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{event_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–±—ã—Ç–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_text_message(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start, /help –∏ —Ç.–¥."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö
def handle_message(update: Update, context: CallbackContext) -> None:
    if update.message.voice:
        # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ command_parser
        handle_voice_command(update, context)
    else:
        handle_text_message(update, context)